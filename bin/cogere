#!/usr/bin/perl
#: Author  : John Shields <john.shields@smartvault.com>
#: Name    : cogere.pl
#: Version : 2.0.0
#: Path    : /usr/bin/cogere
#: Params  : see --help
#: Desc    : Broadcasts commands to select hosts over SSH
#: License :
# Copyright (c) 2015 John Shields
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Cogere;

use Getopt::Long qw/:config no_ignore_case/;

die "Not being ran from sudo!\n" if !$ENV{'SUDO_USER'};

if ( !@ARGV ) {
    help();
    exit;
}

my $default_config = '/opt/sv/cogere/cogere.conf';

my %options;
GetOptions(
    'help'               => \$options{'help'},
    'f|config'           => \$options{'config'},
    'h|host=s@'          => \$options{'host'},
    'r|reason=s'         => \$options{'reason'},
    'new-host'           => \$options{'new-host'},
    'del-host'           => \$options{'del-host'},
    'hostname=s'         => \$options{'hostname'},
    'ipaddr=s'           => \$options{'ipaddr'},
    'port=i'             => \$options{'port'},
    'username=s'         => \$options{'username'},
    'update'             => \$options{'update'},
    'g|group=s@'         => \$options{'group'},
    'new-group'          => \$options{'new-group'},
    'del-group'          => \$options{'del-group'},
    'join-group'         => \$options{'join-group'},
    'leave-group'        => \$options{'leave-group'},
    'H|list-hosts'       => \$options{'list-hosts'},
    'G|list-groups'      => \$options{'list-groups'},
    'M|list-members'     => \$options{'list-members'},
    'a|all'              => \$options{'all'},
    'F|fork=s'           => \$options{'fork'},
    's|scp-source=s'     => \$options{'scp-source'},
    't|scp-target=s'     => \$options{'scp-target'},
    'scp-mkdir'          => \$options{'scp-mkdir'},
    'scp-only'           => \$options{'scp-only'},
    'cleanup-host'       => \$options{'cleanup-host'},
    'commands-file=s'    => \$options{'commands-file'},
    'remove-fingerprint' => \$options{'remove-fingerprint'},
) or die "Invalid arguments. See $0 --help\n";

if ( $options{'help'} ) { 
    help();
    exit;
}

my $config;
if ( defined $options{'config'} ) {
    $config = $options{'config'};
}
else {
    $config = $default_config;
}

my %cogere_args = (
    'user'   => $ENV{'SUDO_USER'},
    'config' => $default_config,
);
my $cogere = Cogere->new(%cogere_args);

if ( defined $options{'list-hosts'} ) {
    $cogere->list_hosts;
    exit;
}

if ( defined $options{'list-groups'} ) {
    $cogere->list_groups;
    exit;
}

if ( defined $options{'list-members'} ) {
    $cogere->list_members( @{ $options{'group'} } );
    exit;
}

if ( defined $options{'show-default'} ) {
    $cogere->print_default_key;
    exit;
}

if ( defined $options{'new-default'} ) {
    $cogere->new_default_key;
    exit;
}

if ( defined $options{'default-key'} ) {
    $cogere->use_default_key(1);
}

if ( defined $options{'new-host'} ) {
    $cogere->new_host(
        'hostname' => $options{'hostname'},
        'username' => $options{'username'},
        'ipaddr'   => $options{'ipaddr'},
        'port'     => $options{'port'},
        'groups'   => $options{'group'},
    );
    exit;
}

if ( defined $options{'del-host'} ) {
    $cogere->del_host( $options{'hostname'} );
    exit;
}

if ( defined $options{'new-group'} ) {
    $cogere->new_group(
        'hosts'  => $options{'host'},
        'groups' => $options{'group'},
    );
    exit;
}

if ( defined $options{'del-group'} ) {
    $cogere->del_group( 'groups' => $options{'group'} );
    exit;
}

if ( defined $options{'join-group'} ) {
    $cogere->join_group(
        'hosts'  => $options{'host'},
        'groups' => $options{'group'},
    );
    exit;
}

if ( defined $options{'leave-group'} ) {
    $cogere->leave_group(
        'groups' => $options{'group'},
        'hosts'  => $options{'host'},
    );
    exit;
}

if ( defined $options{'cleanup-host'} ) {
    $cogere->cleanup_host( $options{'hostname'} );
    exit;
}

if ( defined $options{'remove-fingerprint'} ) {
    $cogere->remove_fingerprint( $options{'ipaddr'} );
    exit;
}

if ( defined $options{'update'} ) {
    $cogere->update(
        'hostname' => $options{'hostname'},
        'username' => $options{'username'},
        'ipaddr'   => $options{'ipaddr'},
        'port'     => $options{'port'},
    );
    exit;
}

if ( defined $options{'fork'} ) {
    $cogere->fork( $options{'fork'} );
}

if ( defined $options{'all'} ) {
    $cogere->all_hosts(1);
}

$cogere->hosts( @{ $options{'host'} } );
$cogere->groups( @{ $options{'group'} } );

if ( defined $options{'scp-mkdir'} ) {
    $cogere->scp_mkdir(1);
}

if ( defined $options{'scp-only'} ) {
    $cogere->scp_only(1);
}

if ( defined $options{'scp-source'} and !defined $options{'scp-target'} ) {
    die "Failed to provide scp-target with scp-source.\n";
}

if ( !defined $options{'scp-source'} and defined $options{'scp-target'} ) {
    die "Failed to provide scp-source with scp-target.\n";
}

if ( defined $options{'scp-source'} and defined $options{'scp-target'} ) { 
    $cogere->scp_source( $options{'scp-source'} );
    $cogere->scp_target( $options{'scp-target'} );
}

$cogere->commands(@ARGV);

if ( defined $options{'commands-file'} ) {
    $cogere->commands_file( $options{'commands-file'} );
}

$cogere->reason( $options{'reason'} );

$cogere->connect;
exit;

sub help {
    print <<EOH;
cogere -- verb: to collect/gather, to compel/force

Usage: cogere --reason 'report hostname' --host host1 --host host2 'hostname'

Operations:
  -h|--host        Host to connect to, can be provided multiple times. Commands
                     are executed on hosts if no other operations provided.
                     Requires -r|--reason
  --new-host       Creates new host entry and keys remote host.
                     Requires --hostname. Optionally --ipaddr --username --port
  --del-host       Removes host entry and remove key from remote host
                     Requires --hostname
  -g|--group       Group to connect to, can be provided multiple times. Commands
                     are executed on groups if no other operations provided.
                     Requires -r|--reason
  --new-group      Creates new group of hosts.
                     Requires -g|--group, -h|--host
  --del-group      Delete group.
                     Requires -g|--group
  --join-group     Adds hosts to an existing group.
                     Requires -g|--group, -h|--host
  --leave-group    Remove hosts from an existing group.
                     Requires -g|--group, -h|--host
  -s|--scp-source  Performs an scp on local file or directory
                     Requires -t|--scp-target or --scp-mkdir
  -t|--scp-target  Performs an scp to target remote directory
                     Requires -s|--scp-source
  --scp-mkdir      Creates target directory on the remote server
  --scp-only       Only copy files to remote hosts
  --cleanup-host   Removes all entries for supplied host
                     Requires --hostname
  --remove-fingerprint
                   Remove the fingerprint from the known_hosts file for the
                     supplied IP address
                     Requires --ipaddr

Options:
  --help              Shows this output
  -f|--config         Alternate configuration file
  --commands-file     Execute commands provided by commands-file
  --hostname          Hostname to be provided to --add-host or --del-host
  --ipaddr            IP address to be provided to --add-host
                        Optional, DNS will be used if not provided
  --username          User name to be provided to --add-host
                        Optional, 'cogere' is used by default
  --port              SSH port to connect to
                        Optional, '22' is used by default
  --update            Updates a field in the hosts configuration
                        Requires --hostname.
                        Accepts --ipaddr, --port, --username.
  -r|--reason         Explanation of the commands you are running
  -a|--all            Builds a group of all defined hosts.
  -F|--fork           Forks supplied number of connections and waits for them
                        to complete, the continues. The keywords 'a' or 'all'
                        will produce a fork number equal to the number of
                        hosts supplied
  -H|--list-hosts     Displays all defined hosts
  -G|--list-groups    Displays all defined groups
  -M|--list-members   Displays all hosts within group
                        Requires -g|--group

Notes:
  Host and group negation:
    Hosts and groups can be negated by prefixing them with ':'
  Mulitple commands:
    Multiple commands can be specified as arguments, they will
    be ran in sequence

John Shields - SmartVault Corporation - 2015
EOH
    return;
}

